
class Client {
    val name = "Unknown"
}

val client = Client()

Suppose we want to get value of property name:

    println(client.name)
    
In fact, when you want to get the value of some property, you call a special
get() function called getter. This is what actually look like:

class Client {
    val name = "Unknown"
        get() {
            return field
        }
}

or with ommited curly brackets 

class Client {
    val name = "Unknown"
        get() = field
}

In this case, getter just returns the value of the name variable. This is the expected
behavior, so Kotlin generates this function for us. YOU DON'T NEED TO WRITE IT!

CUSTOM GETTER

Let's print the customer's name every time we access name:
class Client {
    val name = "Unknown"
        get() {
            println("Somebody wants to know $name name")
            return field
        }
}

val client = Client()

val name = client.name // prints Somebody want to know Unknown name
println(name)

Another use for a custom getter is if you want to return something else. For example,
your task could be to store complete customer information in a variable. If you change some information 
about one person, you will have to change this variable as well.

class Client {
    var name: String = "Unknown"
    val age: Int = 18
    val info: String
        get() {
            return "name = $name, age = $age"
        }
}

val client = Client()
println(client.info)
client.name = "Lester"
client.age = 20
println(client.info)

PROPERTY SETTER

It is also possible to modify the process of changing the property value! Let's take a look
at a simple example:

class Client {
    var name = "Unknown" // default value
}

val client = Client()
client.name = "Ann"

When you want to set the value of some property, you should call a special set() function 
called setter. This is what it looks like:

class Client {
    var name = "Unknown"
        set(value) {
            field = value
        }
}

This function takes one argument (it is named value by convention, but you can use a diffetent name)
and returns nothing.

CUSTOM SETTER

class Client {
    var name = "Unknown"
        set(value) {
            println("The name is changing. Old value is $filed. New value is $value.")
        }
}

val client = Client()
client.name = "Ann" // The name is changing. Old value is Unknown. New value is Ann

Another way to use a custom setter is if you wanted to assign a different value.

class Client {
    var name = "Unknown"
    var age = 18
        set(value) {
            field = if (value < 0) {
                println("Age cannot be negative. Set to $defaultAge")
                defaultAge
            } else 
                value
        }
    val defaultAge = 18
}

val client = Client()
client.age = -1
println(client.age)

GETTER/SETTER in a constructor

class Client(name: String, age: Int) {
    val fullName: String = name
        set(value) {
            println("The name is changing. Old value is $field. New value is $value.")
            field = value
        }
    val age: Int = age // this is a new property, not a property from constructor
        set(value) {
            println("The age is changing. Old value is $field. New value is $value.")
            field = value
        }       
}




